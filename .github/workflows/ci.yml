
# name: "Terraform"

# on:
#   push:
#     branches:
#       - main

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     permissions:
#       pull-requests: write
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: eu-west-2

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           # terraform_version: 1.4.2
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

#       - name: Terraform Init
#         id: init
#         run: terraform init
      
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color

#       - name: Terraform Plan
#         id: plan
#         if: github.event_name == 'pull_request'
#         run: terraform plan -no-color -input=false
#         continue-on-error: true

#       - name: Update Pull Request
#         uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: ${{ steps.plan.outputs.stdout }}
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             <details><summary>Show Plan</summary>
#             \`\`\`terraform\n
#             ${process.env.PLAN}
#             \`\`\`
#             </details>
#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1

#       - name: Terraform Apply ECR
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false -target=aws_ecr_repository.app_repo

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Extract metadata (tags, labels) from Git reference and GitHub events for Docker
#         id: image-metadata
#         uses: docker/metadata-action@v4
#         with:
#           flavor: |
#             latest=false
#           images: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}/service
#           tags: |
#             type=ref,event=branch
#             type=raw,prefix={{branch}}-,value=${{ github.run_number }}
#             type=sha,prefix=,format=long

#       - name: Setup Docker buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build and push Docker image to registry
#         uses: docker/build-push-action@v4
#         with:
#           platforms: ${{ env.DOCKER_PLATFORMS }}
#           cache-from: |
#             type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}/service:${{ github.ref_name }}
#             type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}/service:${{ github.event.repository.default_branch }}
#           cache-to: type=inline,mode=max
#           context: .
#           file: Dockerfile
#           push: true
#           tags: ${{ steps.image-metadata.outputs.tags }}
#           labels: ${{ steps.image-metadata.outputs.labels }}
      
#       - name: Terraform push the rest
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false